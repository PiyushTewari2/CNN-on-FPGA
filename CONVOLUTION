`timescale 1ns / 1ps
module convolution #(parameter IMAGE_DIM = 224, STRIDE = 2, DATA_WIDTH = 4, FILTER_SIZE = 3, NUM_CHANNELS = 3, NUM_FILTERS = 64, DATA_FILTER = 6, OUT_SIZE_BITS = 7) //OUT_SIZE_BITS CAN BE CALCULATED BY CLOG2(112)
    (
    input clk,
    input [DATA_WIDTH*STRIDE*NUM_CHANNELS-1:0] image_channel, //SINCE THE VALUE OF STRIDE IS 2 HENCE I WILL TAKE INPUT OF 2 PIXELK DATA AT A TIME, RGB444,
    input [DATA_FILTER*NUM_CHANNELS*NUM_FILTERS-1:0] filter,  //THEREFORE 8 BITS OF 1 PIXEL AT A TIME AND SINCE 3 CHANNELS HENCE 24 BITS AT A TIME IN ORDER OF CH1 (LSB) ->CH2 -> CH3 (MSB)
                                                              //THE FILTER WILL BE A SEPARATE MEMORY EACH HAVING ONE CHANNEL OF ONE FILTER.
                                                              //THIS FILTER SIMPLY WILL HAVE ORGANIZATION AS FOLLOWS: {64 DIFFERENT FILTERS{3 DIFFERENT CHANNELS{{PARALLEL 6 BITS REPRESING ONE WEIGHT}}}. 
                                                              //OR WE CAN SAY FIRST FILTER 1-> CHANNEL1 -> 6 BITS, THEN CHANNEL 2..., THEN FILTER 2.... 
    output reg stop);

 
    reg [DATA_WIDTH-1:0] line_buffer_image [FILTER_SIZE+STRIDE-2:0][IMAGE_DIM-1:0][NUM_CHANNELS-1:0];  //line buffer for image will be a 3D array having vectors of size 4 bits; ROW NUMBER; COLUMN NUMBER; CHANNEL NUMBER
    reg [DATA_FILTER-1:0] computation_block_weights [FILTER_SIZE-1:0][FILTER_SIZE-1:0][NUM_CHANNELS-1:0][NUM_FILTERS-1:0];  //row; column; cube ka depth, i.e. channel; discrete cubes or different filters
    reg [DATA_WIDTH-1:0] computation_block_image [FILTER_SIZE+STRIDE-2:0][FILTER_SIZE-1:0][NUM_CHANNELS-1:0];  //row; column; cube ka depth, i.e. channel, SINCE THE SAME IMAGE IS BEING CONVOLVED WITH VARIOUS FILTERS NO NEED FOR ITS 64 COPIES

    //Loop Variables
    reg [$clog2(FILTER_SIZE+STRIDE-1)-1:0] i;  //for row number of the line buffer
    reg [$clog2(IMAGE_DIM)-1:0] j;             //for column number of the line buffer
    reg [$clog2(STRIDE):0] a;                  //for filling the input image to the line buffer 
    reg [$clog2(NUM_CHANNELS)-1:0] b;          //for filling all the channels 
    reg [$clog2(FILTER_SIZE+STRIDE-1)-1:0] c;  //to fill the first columns of line buffer from the previous line buffer and the computaion block from current line buffer
    reg [$clog2(NUM_CHANNELS)-1:0] k;
    reg [$clog2(DATA_WIDTH)-1:0] l;
    reg [$clog2(DATA_WIDTH)-1:0] tmp_image_buffer;
    
    reg [OUT_SIZE_BITS-1:0] out_size = ($ceil((IMAGE_DIM-FILTER_SIZE)/STRIDE))+1;
    reg [1:0] pad_size = FILTER_SIZE - (IMAGE_DIM-(($ceil((IMAGE_DIM-FILTER_SIZE)/STRIDE))+1-1)*STRIDE);  //PADDING WILL NEVER BE MORE THAN 4 so 2 bits enough

    
  
    //filling the image buffer and computation block
    always @ (posedge clk)
    begin
        //First we will be filling the line buffer with the image data, based on the stride of the input image, through all the channels
        for(a=0; a<STRIDE; a=a+1)               //this is for column
        begin
            for(b=0; b<NUM_CHANNELS; b=b+1)   //from this channel
            begin
                for (l=0; l<DATA_WIDTH; l=l+1)  //this one is for the input image data which we are receiving
                begin
                    tmp_image_buffer[l] = image_channel[b*STRIDE*DATA_WIDTH+(STRIDE-a-1)*DATA_WIDTH+l];
                end
                l <= 0;
                line_buffer_image[0][a][b] <= tmp_image_buffer;
                for (c=0; c<FILTER_SIZE+STRIDE-1; c=c+1)
                begin
                    if (c != 0)  //since the first row of the line buffer will be receiving the data from the input image, hence when c is not zero
                    begin
                        line_buffer_image [c][a][b] <= line_buffer_image [c-1][IMAGE_DIM-2+a][b];   //fill the line buffer from previous line buffer
                    end
                    computation_block_image [c][a][b] <= line_buffer_image [c][IMAGE_DIM-2+a][b];   //fill the computation block from the line buffer
                end
                c <= 0;
            end
            b <= 0;
        end
        a <= 0;      
        
        //Now for rest of the columns of the line buffer fill from the previous one
        for (k = 0; k < NUM_CHANNELS; k=k+1) //from kth channel
        begin
            for (i = 0; i < FILTER_SIZE+STRIDE-1; i=i+1)   //ith row
            begin
                for (j = STRIDE; j < IMAGE_DIM; j=j+1)
                begin
                    line_buffer_image[i][j][k] <= line_buffer_image[i][j-2][k];
                    if (j < FILTER_SIZE)
                    begin
                        computation_block_image [i][j][k] <= line_buffer_image [i][j-2][k]; 
                    end
                end 
                j <= STRIDE;
            end
            i <= 0;
        end
        k <= 0;
    end
    
endmodule
